#this code was heavily influnced by SVG Essentials by J. David Eisenberg & Amelia Bellamy-Royds
# Find the Nest Group
# Ask for the directory / Base File Name
# For each sheet export an SVG of the sheet

#TODO
# Consider switching to an optimized path
# See if there is a way to set hairline for corel
# Get it to set it at 0,0 once you do the transform
#give option to omit the sheet outline
#handle multiple parts nested in the sheet - when you add a second part it is still set at 0,0
class WikiHouse::NesterSave
  def initialize

  end

  def self.svg_header
    <<-TXT
<?xml version="1.0"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">

    TXT
  end



  def save_sheet(project_name: nil, file_name: nil, sheet_group: nil)
    #what if it already exists?
    puts "#{sheet_group.name} "
    sheet_group_bounding_box = sheet_group.bounds
    puts "Height #{sheet_group_bounding_box.height} "
    puts "Width #{sheet_group_bounding_box.width} "
    puts "Depth #{sheet_group_bounding_box.depth} "
    if sheet_group_bounding_box.depth != 0
      raise ArgumentError, "You must flatten group before trying to nest it."
    end

    puts "Dimensions = #{sheet_group_bounding_box.height * 1.0} x #{sheet_group_bounding_box.width * 1.0}"
    svg_file = File.new(file_name, "w")
    #What if there is a problem writing to that?
#    svg_file.write WikiHouse::NesterSave.svg_header
    max_height = ""
    max_width = ""

    svg_file.write %Q(<svg width="#{sheet_group_bounding_box.width * 1.0}in"
height="#{sheet_group_bounding_box.height * 1.0}in"
viewBox="0 0 #{sheet_group_bounding_box.width * 1.0} #{sheet_group_bounding_box.height * 1.0}"
xmlns="http://www.3.org/2000/svg" version="1.1" baseProfile="full">\n)

    svg_file.write %Q(<title>#{project_name}</title>\n)
    svg_file.write %Q(<desc>#{sheet_group.name}</desc>\n)
    svg_file.write %Q(<!-- Generated by WikiHouse::NesterSave -->\n)

    #THis line handles converting the co-ordinates from Sketup into SVG
    transform_settings = %Q(transform="translate(0,#{sheet_group_bounding_box.width * 0.5}) scale(1, -1)")
    sheet_group.entities.each do |e|
      if e.typename == "Group"
        puts "#{e.name}"

        face_count = 0
        face = nil
        e.entities.each do |sub_e|
          if sub_e.typename == "Face"
            face = sub_e
            face_count += 1
          end
        end
        if face_count > 1
          puts "Sorry this needs to be flat"
        else
            svg_file.write %Q(<g id="#{e.name.gsub(" ","_")}" style="fill: none; stroke: blue; stroke-width: 0.002in" #{transform_settings}>\n)
            svg_file.write %Q(<desc>#{e.name}</desc>\n)
            face.loops.each do |loop|
             puts loop.outer? ?  "Outer Loop" : "Inner Loop"
              points = loop.vertices.collect { |v| "#{v.position.x * 1.0} #{v.position.y * 1.0}"}
              svg_file.write %Q(<polygon points="#{points.join(", ")}" />\n)
              #loop.vertices.each do |v|
              #  puts Sk.point_to_s(v.position)
              #end
            end
          svg_file.write %Q(</g>\n)
        end
      end
    end

     svg_file.write %Q(</svg>)
     svg_file.close
     puts "Wrote out #{file_name}"
  end

  def save!
    #ask for the directory /base file name
    base_filename = "Nested"
    base_directory = "C:/Users/delmendo/Desktop"
    project_name = "Half Height Wall"
    #Find the nest group
    nesting_group = Sk.find_group_by_name(WikiHouse::Nester.nest_group_name, match_ok: false)
    nesting_group.entities.each do |e|
      save_sheet(project_name: project_name,
                 file_name: "#{base_directory}/#{base_filename}-#{e.name.gsub(" ", "_")}.svg",
                 sheet_group: e)
      break
    end


  end
end